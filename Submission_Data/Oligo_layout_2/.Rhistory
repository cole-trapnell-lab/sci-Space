# Set a seed to make umap and other non-deterministic steps consistent
set.seed(seed = 42)
})
cds =
cds %>%
estimate_size_factors() %>%
detect_genes() %>%
preprocess_cds(num_dim = 100) %>%
reduce_dimension()
plot_cells(cds)
cds = cluster_cells(cds)
plot_cells(cds)
plot_cells(cds)
plot_cells(cds,genes = c("SHHA"))
plot_cells(cds,
genes = c("SHHA",
"NOTO"))
cds =
cds %>%
estimate_size_factors() %>%
detect_genes() %>%
preprocess_cds(num_dim = 100) %>%
reduce_dimension(method = "tSNE") %>%
cluster_cells()
plot_cells(cds,
genes = c("SHHA",
"NOTO"))
cds =
cds %>%
estimate_size_factors() %>%
detect_genes() %>%
preprocess_cds(num_dim = 100) %>%
reduce_dimension() %>%
cluster_cells()
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
R.Version()
R.Version()
source("https://raw.githubusercontent.com/farrellja/URD/master/URD-Install.R")
library(monocle3)
normalize_names_replacement_value
n.rt.wells = 111 * 96
f = function(i) {
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
}
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
library(dplyr)
n.cells.per.pcr.well = 1750
n.rt.wells = 111 * 96
f = function(i) {
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
}
mean(sapply(1:100, f))
n.cells.per.pcr.well = 1400
n.rt.wells = 111 * 96
f = function(i) {
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
}
mean(sapply(1:100, f))
700* 1000/3000
700* 1000
700* 1000/3000
700* 1000/2000
700* 1000/2500
n.cells.per.pcr.well = 1400
n.rt.wells = 111 * 96
f = function(i) {
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
}
mean(sapply(1:100, f))
n.cells.per.pcr.well = 1000
n.rt.wells = 111 * 96
f = function(i) {
sum((data.frame(x = sample(1:n.rt.wells, n.cells.per.pcr.well, replace = T)) %>%
group_by(x) %>%
summarize(n = n()))$n > 1) / n.cells.per.pcr.well
}
mean(sapply(1:100, f))
library(monocle3)
cells_to_keep =
colData(cds) %>%
as.data.frame() %>%
filter(!is.na(ratio_top_2),
ratio_top_2  >5) %>%
pull(Cell) %>%
as.character()
library(monocle3)
monocle_theme_opts
monocle3:::monocle_theme_opts
ggplot() +
geom_point(data =
colData(cds) %>%
as.data.frame() %>%
filter(data_set == "EB differentiation") %>%
filter(Activin == 0) %>%
dplyr::select(-Activin,
-BMP),
aes(x = umap1,
y = umap2),
color = "grey80",
size = 0.25,
stroke = 0) +
geom_point(data =
colData(cds) %>%
as.data.frame() %>%
filter(data_set == "EB differentiation"),
aes(x = umap1,
y = umap2,
color = day),
size = 0.25,
stroke = 0) +
monocle3:::monocle_theme_opts() +
clear_theme() +
no_axes() +
scale_color_manual(values = c("4" = "#ffeda0",
"5" = "#feb24c",
"6" = "#f03b20")) +
facet_wrap(~BMP,
nrow = 1) +
theme(legend.position = "none",
strip.text = element_blank()) +
ggsave("plots/EB_activin0_bmp_umap.png",
height = 2.5,
width = 8,
dpi = 600,
bg = "transparent")
plot_cells(cell_size = 4)plot_cells
plot_cells
theme_bw
ggplot2::theme_bw()
ggplot2::theme_bw
plot_cells()
plot_cells
rownames_to_column
# Load startup packages ---------------------------------------------------
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
})
setwd("/Volumes/GoogleDrive/My Drive/sciSpace/Submission_Data/Oligo_layout_2/")
# Constructing the oligo array ---------------------------------------------------
# Layout of how the printer arrays the spatial grid
oligo_plate_layout =read.delim("plate_layout.tsv", header = F,sep = "\t")
rownames(oligo_plate_layout) = as.character(1:84)
colnames(oligo_plate_layout) = as.character(1:84)
oligo_plate_layout = as.data.frame.table(as.matrix(oligo_plate_layout))
colnames(oligo_plate_layout) = c("Row","Col","Oligo")
rownames(oligo_plate_layout) = oligo_plate_layout$Oligo
oligo_plate_layout$plate = stringr::str_split_fixed(string = oligo_plate_layout$Oligo,pattern = "_",n = 2)[,1]
oligo_plate_layout$well = stringr::str_split_fixed(string = oligo_plate_layout$Oligo,pattern = "_",n = 2)[,2]
oligo_plate_layout$row_well = (substr(x = oligo_plate_layout$well,start = 1,stop = 1))
oligo_plate_layout$col_well = (substr(x = oligo_plate_layout$well,start = 2,stop = 3))
# Read in all the hash oligos available
all_hashes = read.table(file = "all_hashes.tsv", sep= "\t",header = F)
colnames(all_hashes) = c("plate","position","RT_seq","seq","barcode")
all_hashes =
all_hashes %>%
mutate(plate = stringr::str_split_fixed(plate, "_",2)[,1]) %>%
dplyr::select(-seq)
new19 = read.csv(file = "plate12_to_19.csv", header = T)
reorder12 = all_hashes %>% filter(plate == "plate12")
plate19reorder=
data.frame(position = reorder12$position)
reorder12$position = new19$plate19
reorder12$plate = "plate19"
plate19reorder =
plate19reorder %>% left_join(reorder12, by = "position")
all_hashes = all_hashes %>% filter(plate != "plate19")
all_hashes = rbind(all_hashes,plate19reorder)
# This function builds a 384 well plate from 4 given 96 well plates in a specific order
build_384_well_plate = function(plate1, plate2, plate3, plate4, hashes, label = ""){
plate1_table =
data.frame(
hash =  hashes %>% filter(plate == plate1) %>% pull(RT_seq),
row = seq(1:8) * 2  - 1,
col = (seq(0,95) %/% 8 + 1)*2 - 1,
position = "1")
plate2_table =
data.frame(
hash =  rev(hashes %>% filter(plate == plate2) %>% pull(RT_seq)),
row = seq(1:8) * 2 - 1,
col = (seq(0,95) %/% 8 + 1)*2,
position = "2")
plate3_table =
data.frame(
hash =  rev(hashes %>% filter(plate == plate3) %>% pull(RT_seq)),
row = seq(1:8) * 2,
col = (seq(0,95) %/% 8 + 1)*2 - 1,
position = "3")
plate4_table =
data.frame(
hash =  hashes %>% filter(plate == plate4) %>% pull(RT_seq),
row = seq(1:8) * 2,
col = (seq(0,95) %/% 8 + 1)*2,
position = "4")
plate_384_well_plate =
rbind(plate1_table,
plate2_table,
plate3_table,
plate4_table)
plate_384_well_plate$plate = label
rows_to_letters =
data.frame(row_letters = LETTERS[1:16],
row = seq(1,16))
plate_384_well_plate =
left_join(plate_384_well_plate,rows_to_letters, by = "row")
plate_384_well_plate$well_position = paste0(label, "_",
plate_384_well_plate$row_letters,
plate_384_well_plate$col)
return(plate_384_well_plate)
}
# Build the 19 384 well plates that constitute the spatial grid -----------
plate1 = build_384_well_plate("plate1","plate15","plate9","plate10",hashes = all_hashes, label = "Plate1")
plate2 = build_384_well_plate("plate2","plate5","plate2","plate6",hashes = all_hashes, label = "Plate2")
plate3 = build_384_well_plate("plate3","plate18","plate16","plate15",hashes = all_hashes, label = "Plate3")
plate4 = build_384_well_plate("plate4","plate13","plate5","plate9",hashes = all_hashes, label = "Plate4")
plate5 = build_384_well_plate("plate5","plate7","plate19","plate11",hashes = all_hashes, label = "Plate5")
plate6 = build_384_well_plate("plate6","plate16","plate15","plate5",hashes = all_hashes, label = "Plate6")
plate7 = build_384_well_plate("plate7","plate10","plate11","plate1",hashes = all_hashes, label = "Plate7")
plate8 = build_384_well_plate("plate8","plate14","plate8","plate18",hashes = all_hashes, label = "Plate8")
plate9 = build_384_well_plate("plate9","plate12","plate4","plate2",hashes = all_hashes, label = "Plate9")
plate10 = build_384_well_plate("plate10","plate2","plate12","plate4",hashes = all_hashes, label = "Plate10")
plate11 = build_384_well_plate("plate12","plate6","plate18","plate16",hashes = all_hashes, label = "Plate11")
plate12 = build_384_well_plate("plate11","plate9","plate7","plate13",hashes = all_hashes, label = "Plate12")
plate13 = build_384_well_plate("plate13","plate19","plate3","plate8",hashes = all_hashes, label = "Plate13")
plate14 = build_384_well_plate("plate14","plate3","plate14","plate3",hashes = all_hashes, label = "Plate14")
plate15 = build_384_well_plate("plate15","plate11","plate6","plate17",hashes = all_hashes, label = "Plate15")
plate16 = build_384_well_plate("plate16","plate17","plate1","plate12",hashes = all_hashes, label = "Plate16")
plate17 = build_384_well_plate("plate17","plate8","plate17","plate7",hashes = all_hashes, label = "Plate17")
plate18 = build_384_well_plate("plate18","plate1","plate13","plate14",hashes = all_hashes, label = "Plate18")
plate19 = build_384_well_plate("plate19","plate4","plate10","plate19",hashes = all_hashes, label = "Plate19")
all_plates = rbind(plate1,plate2,plate3,plate4,
plate5,plate6,plate7,plate8,
plate9,plate10,plate11,plate12,
plate13,plate14,plate15,plate16,
plate17,plate18,plate19)
all_plates = all_plates %>%
dplyr::rename(Oligo = well_position) %>%
dplyr::select(-plate)
oligo_plate_layout =
left_join(oligo_plate_layout,all_plates, by = "Oligo" )
left_join(oligo_plate_layout,
all_hashes %>%
dplyr::select(hash = RT_seq,
barcode,
plate96 = plate),
by = "hash")
oligo_plate_layout  =
left_join(oligo_plate_layout,
all_hashes %>%
dplyr::select(hash = RT_seq,
barcode,
plate96 = plate),
by = "hash")
SYBR_wells =
read.table(file = "SYBR_wells.tsv",
header = T,
sep = "\t")
oligo_plate_layout =
oligo_plate_layout %>%
left_join(SYBR_wells,
by = "Oligo")
# Plot of how 96 well plates end up
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout %>% dplyr::select(-plate96), aes(x = Row, y = Col)) +
geom_tile(aes(x = Row, y = Col, fill = plate96)) +
facet_wrap(~plate96, ncol = 5) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6),
strip.text.x = element_text(size = 6))
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout %>% dplyr::select(-col_well), aes(x = Row, y = Col)) +
geom_tile(data=oligo_plate_layout %>% dplyr::select(-col_well), aes(x = Row, y = Col)) +
geom_tile(aes(x = Row, y = Col, fill = col_well)) +
facet_wrap(~col_well, ncol = 5) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6),
strip.text.x = element_text(size = 6))
# Revalue oligo combos corresponding to rows and combos for sectors --------
oligo_plate_layout$rowCombo <- plyr::revalue((oligo_plate_layout$row_well),c("A" = 'A',
"E" = 'A',
"I" = 'A',
"M" = 'A',
"B" = 'B',
"F" = 'B',
"J" = 'B',
"N" = 'B',
"C" = 'C',
"G" = 'C',
"K" = 'C',
"O" = 'C',
"D" = 'D',
"H" = 'D',
"L" = 'D',
"P" = 'D'))
oligo_plate_layout$colCombo <- plyr::revalue((oligo_plate_layout$col_well),c("1" = '1',
"10" = '2',
"11" = '3',
"12" = '4',
"13" = '1',
"14" = '2',
"15" = '3',
"16" = '4',
"17" = '1',
"18" = '2',
"19" = '3',
"20" = '4',
"2" = '2',
"21" = '1',
"22" = '2',
"23" = '3',
"24" = '4',
"3" = '3',
"4" = '4',
"5" = '1',
"6" = '2',
"7" = '3',
"8" = '4',
"9" = '1'))
oligo_plate_layout$combo = paste(oligo_plate_layout$rowCombo, oligo_plate_layout$colCombo)
oligo_plate_layout$sector<- plyr::revalue((oligo_plate_layout$combo),c(
"D 4"= "sector16",
"C 4" = "sector12",
"B 4" = "sector8",
"A 4" = "sector4",
"D 3"= "sector15",
"C 3" = "sector11",
"B 3" = "sector7",
"A 3" = "sector3",
"D 2"= "sector14",
"C 2" = "sector10",
"B 2"= "sector6",
"A 2" = "sector2",
"D 1" = "sector13",
"C 1" = "sector9",
"B 1" = "sector5",
"A 1" = "sector1"))
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout %>% dplyr::select(-combo), aes(x = Row, y = Col)) +
geom_tile(aes(x = Row, y = Col, fill = sector)) +
facet_wrap(~combo) +
theme_void()  +
theme(legend.position="none")
colors = c("#41e05e",
"#fc9cf6",
"#f9e0a9",
"#ed6f99",
"#1956d1",
"#eaaf85",
"#dd7f7a",
"#27e8d7",
"#8e68ff",
"#7dd7d8",
"#3a63a8",
"#f2b529",
"#bbfc9f",
"#20188e",
"#9b08cc",
"#e0503a")
sectors =
oligo_plate_layout$sector %>%
unique()
colors_df = data.frame(color = colors,
sector = sectors)
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col,
fill = SYBR)) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6))
# Supplementary Figure 1 — Panel D ----------------------------------------
oligo_plate_layout %>%
group_by(combo) %>%
mutate(med_row = median(as.numeric(Row)),
med_col = median(as.numeric(Col)),
sector = stringr::str_replace(sector, pattern = "sector", "Sector ")) %>%
ggplot() +
geom_tile(aes(x = Row, y = Col, fill = combo),color = "black") +
geom_label(aes(x = med_row, y = med_col, label = sector), size = 1.5) +
theme_void()  +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
text = element_text(size = 6))
oligo_plate_layout
oligo_plate_layout =
left_join(oligo_plate_layout,
colors_df, by = "sector")
write.table(oligo_plate_layout,
file = "oligo_plate_layout_2.tsv",
sep = "\t",
quote = F)
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col,
fill = SYBR)) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6))
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col),
fill = "black") +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white") +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6))
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col),
fill = "black") +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white",
size = 0.5) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6))
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col),
fill = "black") +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white",
size = 0.5) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6)) +
ggsave("barcode_grid_2.pdf",
height = 3,
width = 3)
getwd()
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col),
fill = "black") +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white",
size = 0.5) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6)) +
ggsave("barcode_grid_2.png",
height = 3,
width = 3)
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col),
fill = "black") +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white",
size = 0.25) +
theme_void()  +
theme(legend.position = "none",
text = element_text(size = 6)) +
ggsave("barcode_grid_2.png",
height = 3,
width = 3)
ggplot(oligo_plate_layout) +
geom_tile(data=oligo_plate_layout,
aes(x = Row,
y = Col,
fill = combo)) +
geom_point(data=oligo_plate_layout %>%
filter(SYBR),
aes(x = Row,
y = Col),
color = "white",
size = 0.25) +
theme_void()  +
scale_fill_manual(values = colors) +
theme(legend.position = "none",
text = element_text(size = 6)) +
ggsave("barcode_grid_2.png",
height = 3,
width = 3)
